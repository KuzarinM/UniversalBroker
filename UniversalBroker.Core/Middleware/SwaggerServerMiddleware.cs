using Microsoft.OpenApi.Models;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Nodes;

namespace UniversalBroker.Core.Middleware
{
    public class SwaggerServerMiddleware(RequestDelegate next)
    {
        private readonly RequestDelegate _next = next;

        public async Task InvokeAsync(HttpContext context)
        {
            if (context.Request.Path == "/swagger/v1/swagger.json")
            {
                var response = context.Response;
                var originBody = response.Body;
                using var newBody = new MemoryStream();
                response.Body = newBody;

                await _next(context);

                await ModifyResponseAsync(response, context);
                newBody.Seek(0, SeekOrigin.Begin);
                await newBody.CopyToAsync(originBody);
                response.Body = originBody;
            }
            else
            {
                await _next(context);
            }
        }

        private async Task ModifyResponseAsync(HttpResponse response, HttpContext context)
        {
            var stream = response.Body;

            stream.Seek(0, SeekOrigin.Begin);
            using var reader = new StreamReader(stream, leaveOpen: true);
            string originalResponse = await reader.ReadToEndAsync();

            string modifiedResponse = ProcessJson(context, originalResponse);

            stream.SetLength(0);
            using var writer = new StreamWriter(stream, leaveOpen: true);
            await writer.WriteAsync(modifiedResponse);
            await writer.FlushAsync();
            response.ContentLength = stream.Length;
        }

        private string ProcessJson(HttpContext context, string responce)
        {
            var jsonObject = JObject.Parse(responce);

            var referer = context.Request.Headers["Referer"].FirstOrDefault();
            if (!string.IsNullOrEmpty(referer))
            {
                string baseUrl = referer.Replace("/swagger/index.html", "");

                var servers = new List<Dictionary<string, string>>()
                {
                    new() {
                        { "url",baseUrl },
                        { "description", "Autogenerated" }
                    },
                    new() {
                        { "url","/" },
                        { "description", "Default" }
                    }
                };

                jsonObject.Add("servers", JToken.FromObject(servers));

                return jsonObject.ToString();
            }

            return responce;
        }

    }
}
